// Generated by CoffeeScript 1.7.1
(function() {
  var createCount, createScore, exports;

  exports = window.data = {};

  createScore = function() {
    return Math.round(Math.random() * 10);
  };

  createCount = function() {
    return Math.round(Math.random() * 20);
  };

  exports.getUser = function(userId) {
    if (!userId) {
      return $.getJSON('me.json').then(function(result) {
        return result;
      });
    } else {
      return $.getJSON('user.json').then(function(result) {
        return result;
      });
    }
  };

  exports.getScore = function(userID, startDate, endDate) {
    var cooperativeCount, day, days, efficiencyCount, end, otherList, selfList, start, workloadCount;
    start = +(startDate.split('.')[startDate.split('.').length - 1]);
    end = +(endDate.split('.')[endDate.split('.').length - 1]);
    days = (function() {
      var _i, _results;
      _results = [];
      for (day = _i = start; start <= end ? _i <= end : _i >= end; day = start <= end ? ++_i : --_i) {
        _results.push('2014.08.' + day);
      }
      return _results;
    })();
    selfList = _.map(days, function(date) {
      return {
        date: date,
        score: {
          workload: createScore(),
          efficiency: createScore(),
          cooperative: createScore()
        }
      };
    });
    otherList = _.map(days, function(date) {
      return {
        date: date,
        score: {
          workload: createScore(),
          efficiency: createScore(),
          cooperative: createScore()
        }
      };
    });
    workloadCount = createCount();
    efficiencyCount = createCount();
    cooperativeCount = createCount();
    return $.Deferred().resolve({
      dayCount: days.length,
      selfList: selfList,
      otherList: otherList,
      workloadCount: workloadCount,
      efficiencyCount: efficiencyCount,
      cooperativeCount: cooperativeCount,
      workloadSum: _.reduce(otherList, (function(memo, item) {
        return memo + item.score.workload;
      }), 0),
      efficiencySum: _.reduce(otherList, (function(memo, item) {
        return memo + item.score.efficiency;
      }), 0),
      cooperativeSum: _.reduce(otherList, (function(memo, item) {
        return memo + item.score.cooperative;
      }), 0)
    });
  };

  exports.markUser = function(uid, scores) {};

}).call(this);
