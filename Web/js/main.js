// Generated by CoffeeScript 1.7.1
var $doc, currentUser, dateToStr, getRangeByDays, myUserID, storedEndDate, storedStartDate;

dateToStr = function(d) {
  return [d.getFullYear(), d.getMonth() + 1, d.getDate()].join('.');
};

getRangeByDays = function(days) {
  return [
    dateToStr(new Date().add({
      'days': -days
    })), dateToStr(new Date())
  ];
};

myUserID = null;

currentUser = null;

storedStartDate = null;

storedEndDate = null;

$doc = $(document);

$doc.on('init', function() {
  var $dayindex, $dayslider;
  $dayindex = $doc.find('.barchart').find('.dayindex');
  $dayslider = $doc.find('.barchart').find('.dayslider').slider({
    min: 1,
    max: 30,
    value: 7,
    slide: function(e, ui) {
      return $dayindex.html(ui.value);
    },
    stop: function(e, ui) {
      var range;
      range = getRangeByDays(ui.value);
      return $doc.trigger('loadScore', [range[0], range[1]]);
    }
  });
  $doc.find('.barchart').find('.item-selector').on('mouseenter', function() {
    return $doc.find('.barchart').find('.item-selector').css('border-bottom-color', 'white').end().find('.item-selector-list').show();
  });
  $doc.find('.barchart').find('.item-selector-list').on('click', 'li', function() {
    $doc.find('.barchart').find('.item-selector').css('border-bottom-color', '#eaeaea');
    $doc.find('.barchart').find('.item-selector-list').hide();
    return $doc.trigger('loadScore', [null, null, $(this).data('value')]);
  }).on('mouseleave', function() {
    $doc.find('.barchart').find('.item-selector').css('border-bottom-color', '#eaeaea');
    return $doc.find('.barchart').find('.item-selector-list').hide();
  });
  return data.getUser().then(function(user) {
    myUserID = user.id;
    return $doc.trigger('initUser', user);
  });
}).on('initUser', function(e, user) {
  return $doc.data('myId', user.id).trigger('loadUser', user);
}).on('loadUser', function(e, user, dontloadScore) {
  var first, name, remain;
  currentUser = user;
  name = user.name;
  first = name[0];
  remain = name.slice(1);
  $doc.data('userId', user.id).find('.header .name').html('').append($('<span />').html(first).addClass('first')).append($('<span />').html(remain)).end().find('.my').find('.avatar img').attr('src', user.avatar100).end().find('.marked').html('今日已评价 ' + user.markedCount).end().end();
  if (user.id === myUserID) {
    $doc.find('.my .menu #view-self').hide();
    $doc.find('.my .menu :not(#view-self)').show();
  } else {
    $doc.find('.my .menu #view-self').show();
    $doc.find('.my .menu :not(#view-self)').hide();
  }
  if (!dontloadScore) {
    return $doc.trigger('loadScore');
  }
}).on('loadScore', function(e, startDate, endDate, scoreItem) {
  if (!startDate) {
    startDate = storedStartDate || getRangeByDays(7)[0];
  }
  if (!endDate) {
    endDate = storedEndDate || getRangeByDays(7)[1];
  }
  storedStartDate = startDate;
  storedEndDate = endDate;
  return data.getScore($doc.data('userId'), startDate, endDate).then(function(result) {
    var arcOther, arcPoint, arcSelf, arcTween, arcTweenBack, averageScores, averageScoresSelf, barChart, barChartYTicks, barchartSelector, filterScore, getRadialChartChild, getRadialChartColor, getRadialChartColorSelf, height, i, linkData, margin, otherBallLink, othersBall, otherscoreTotal, outHeight, outWidth, rHeight, rMargin, rWidth, radialChart, selfBar, selfX, selfY, selfscoreTotal, status, v, width, yAxis;
    if (!result) {
      return;
    }
    averageScores = [];
    _.each(['cooperative', 'efficiency', 'workload'], function(item) {
      var average;
      average = Math.round(result[item + 'Sum'] / (result[item + 'Count'] || 1) * 10) / 10;
      averageScores.push(average);
      return $doc.find('.score').find('.score-item-' + item).find('.score-detail-total').html(result[item + 'Sum']).end().find('.score-detail-count').html(result[item + 'Count']).end().find('.score-average-num').html(average).end();
    });
    averageScoresSelf = _.map(['cooperative', 'efficiency', 'workload'], function(item) {
      var total, _ref;
      total = _.reduce(result.selfList, function(memo, day) {
        return memo + day.score[item];
      }, 0);
      return Math.round(total / (((_ref = result.selfList) != null ? _ref.length : void 0) || 1) * 10) / 10;
    });
    otherscoreTotal = Math.round((result.workloadSum / result.workloadCount + result.efficiencySum / result.efficiencyCount + result.cooperativeSum / result.cooperativeCount) * 10) / 10 || 0;
    selfscoreTotal = _.reduce(averageScoresSelf, (function(memo, num) {
      return memo + num;
    }), 0);
    if (otherscoreTotal === 0) {
      status = 'good';
    } else {
      if (_.reduce([1, 2, 3], (function(memo, i) {
        return (averageScoresSelf[i] / averageScores[i]) > 1.2 || memo;
      }), false)) {
        status = 'damnit';
      } else if (_.reduce([1, 2, 3], (function(memo, i) {
        return ((averageScoresSelf[i] / averageScores[i]) > 1.1) || memo;
      }), false)) {
        status = 'warning';
      } else {
        status = 'good';
      }
    }
    $doc.find('.score').find('.timerange').find('.daterange').html(startDate + '-' + endDate).end().find('.daycount').animate({
      opacity: 0
    }, 200, function() {
      return $doc.find('.score').find('.timerange').find('.daycount').html(result.dayCount);
    }).animate({
      opacity: 1
    }, 200).end().end().find('.statusicon').removeClass('current').filter('.statusicon-' + status).addClass('current').end().end().end().find('.radialchart-text').find('.otherscore').html(otherscoreTotal).end().end();
    rWidth = 142;
    rHeight = 142;
    rMargin = {
      top: 5,
      bottom: 5,
      left: 5,
      right: 5
    };
    radialChart = d3.select('.radialchart .chart').html('').append('svg').attr('transform', "translate(" + rMargin.left + ", " + rMargin.top + ")").attr('width', rWidth - rMargin.left - rMargin.right).attr('height', rHeight - rMargin.top - rMargin.bottom);
    getRadialChartChild = function() {
      return radialChart.append('g').attr('width', rWidth - rMargin.left - rMargin.right).attr('height', rHeight - rMargin.top - rMargin.bottom);
    };
    getRadialChartColor = function(d, i) {
      switch (i) {
        case 0:
          return '#FE6440';
        case 1:
          return '#60AED0';
        case 2:
          return '#FEA540';
      }
    };
    getRadialChartColorSelf = function(d, i) {
      switch (i) {
        case 0:
          return '#a67947';
        case 1:
          return '#577e8f';
        case 2:
          return '#a55941';
      }
    };
    arcTween = function(current, d, i) {
      var _arc;
      _arc = d3.svg.arc().innerRadius(10 + 16 * (i + 1) - 2).outerRadius(10 + 16 * (i + 1) + 2).startAngle(0).endAngle(0);
      return function(a) {
        var interp;
        interp = d3.interpolate(current || 0, a);
        return function(t) {
          return _arc.endAngle(-interp(t) / 10 * 2 * Math.PI)();
        };
      };
    };
    arcTweenBack = function(current, d, i) {
      var _arc;
      _arc = d3.svg.arc().innerRadius(10 + 16 * (i + 1) - 2).outerRadius(10 + 16 * (i + 1) + 2).startAngle(-current / 10 * 2 * Math.PI).endAngle(-current / 10 * 2 * Math.PI);
      return function(a) {
        var interp;
        interp = d3.interpolate(a, current || 0);
        return function(t) {
          return _arc.endAngle(-interp(t) / 10 * 2 * Math.PI)();
        };
      };
    };
    getRadialChartChild().selectAll('.arc-holder').data(averageScores).enter().append('path').attr('transform', "translate(" + (rWidth / 2) + ", " + (rHeight / 2) + ")").attr('d', d3.svg.arc().innerRadius(function(d, i) {
      return 10 + 16 * (i + 1) - 1;
    }).outerRadius(function(d, i) {
      return 10 + 16 * (i + 1) + 1;
    }).startAngle(0).endAngle(2 * Math.PI)).attr('fill', '#eaeaea');
    arcOther = getRadialChartChild().selectAll('.arc-other').data(averageScores).enter().append('path').attr('transform', "translate(" + (rWidth / 2) + ", " + (rHeight / 2) + ")").attr('fill', getRadialChartColor);
    arcOther.transition().duration(2000).attrTween('d', function(d, i) {
      return arcTween(0, d, i)(d);
    });
    arcSelf = getRadialChartChild().selectAll('.arc-self').data(averageScoresSelf).enter().append('path').attr('transform', "translate(" + (rWidth / 2) + ", " + (rHeight / 2) + ")").attr('fill', getRadialChartColorSelf);
    arcPoint = getRadialChartChild().selectAll('circle').data(averageScores).enter().append('circle').attr('r', 6).attr('transform', function(d, i) {
      return "translate(" + (rWidth / 2) + ", " + (rHeight / 2 - (10 + 16 * (i + 1))) + ")";
    }).attr('fill', getRadialChartColor).on('mouseenter', function(d, i) {
      if (!selfscoreTotal) {
        return;
      }
      d3.select(this).transition().duration(1000).attr('r', '8').attr('fill', function() {
        return getRadialChartColorSelf(d, i);
      });
      return d3.select(arcSelf[0][i]).transition().duration(1000).attrTween('d', function(d) {
        return arcTween(0, d, i)(d);
      });
    }).on('mouseleave', function(d, i) {
      if (!selfscoreTotal) {
        return;
      }
      d3.select(this).transition().duration(1000).attr('r', '6').attr('fill', function() {
        return getRadialChartColor(d, i);
      });
      return d3.select(arcSelf[0][i]).transition().duration(500).attrTween('d', function(d) {
        return arcTweenBack(0, d, i)(d);
      });
    });
    barchartSelector = scoreItem;
    if (barchartSelector) {
      filterScore = function(scoreObj) {
        return scoreObj[barchartSelector];
      };
    } else {
      filterScore = function(scoreObj) {
        var total, vals;
        vals = _.map(scoreObj, function(val, key) {
          return val;
        });
        total = _.reduce(vals, (function(memo, num) {
          return memo + num;
        }), 0);
        if (vals && vals.length) {
          return total / vals.length;
        } else {
          return 0;
        }
      };
    }
    margin = {
      left: 80,
      right: 40,
      top: 40,
      bottom: 40
    };
    outWidth = $doc.find('.barchart').find('.chart').width();
    outHeight = $doc.find('.barchart').find('.chart').height();
    width = outWidth - margin.left - margin.right;
    height = outHeight - margin.top - margin.bottom;
    selfX = d3.scale.ordinal().domain(_.map(result.selfList, function(item) {
      return item.date;
    })).rangeBands([0, width]);
    selfY = d3.scale.linear().domain([0, 10]).range([height, 0]);
    yAxis = d3.svg.axis().scale(selfY).orient('left');
    barChart = d3.select('.barchart .chart').html('').append('svg').attr('width', outWidth).attr('height', outHeight).append('g').attr('transform', "translate(" + margin.left + ", " + margin.top + ")");
    barChartYTicks = barChart.append('g').attr('class', 'y axis').attr('transform', "translate(-10, 0)").call(yAxis).selectAll('line').attr('x1', width).attr('stroke-width', 1).attr('stroke', function(d, i) {
      if (i % 2) {
        return '#f3f3f3';
      } else {
        return '#e5e5e5';
      }
    });
    selfBar = barChart.selectAll('.bar').data(result.selfList).enter().append('rect').attr('transform', function(d) {
      return "translate(" + (selfX(d.date)) + ", 0)";
    }).attr('width', '20').attr('y', height).attr('height', 0);
    selfBar.transition().duration(1000).attr('height', function(d) {
      return height - selfY(filterScore(d.score));
    }).attr('y', function(d) {
      return selfY(filterScore(d.score));
    });
    selfBar.on('mouseenter', function() {
      return d3.select(this).style('fill-opacity', 0.8);
    }).on('mouseout', function() {
      return d3.select(this).style('fill-opacity', 1);
    });
    linkData = (function() {
      var _i, _len, _ref, _results;
      _ref = result.otherList;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        v = _ref[i];
        _results.push([v, result.otherList[i + 1]]);
      }
      return _results;
    })();
    otherBallLink = barChart.selectAll('.link').data(linkData).enter().append('line').attr('x1', function(d) {
      return selfX(d[0].date) + 10;
    }).attr('y1', function(d) {
      return selfY(filterScore(d[0].score));
    }).attr('x2', function(d) {
      return selfX(d[d[1] ? 1 : 0].date) + 10;
    }).attr('y2', function(d) {
      return selfY(filterScore(d[d[1] ? 1 : 0].score));
    }).attr('stroke', '#fff');
    otherBallLink.transition().duration(1000).attr('stroke', '#FEA540');
    othersBall = barChart.selectAll('.ball').data(result.otherList).enter().append('circle').attr('transform', function(d) {
      return "translate(" + (selfX(d.date) + 10) + ", " + (selfY(filterScore(d.score))) + ")";
    }).attr('r', '0');
    othersBall.transition().duration(1000).attr('r', '10');
    return othersBall.on('mouseenter', function() {
      return d3.select(this).style('fill-opacity', 0.8);
    }).on('mouseout', function() {
      return d3.select(this).style('fill-opacity', 1);
    });
  });
}).on('click', '#mark-self,#mark-other', function(e) {
  var $content, dlg, isSelf;
  isSelf = $(this).is('#mark-self');
  dlg = dialog({
    skin: 'dialog',
    onclose: function() {
      $doc.find('.mark-dialog').find('.user-search').val('');
      return $doc.find('.mark-dialog').find('.mark-bar-item').removeClass('highlight').removeClass('selected');
    }
  });
  $content = $($('#tpl-mark-dialog').html());
  if (isSelf) {
    $content.find('.title').html('自我评价');
    $content.find('.user-selector').hide();
  } else {
    $content.find('.title').html('评价他人');
    $content.find('.user-selector').show();
  }
  $content.find('.mark-list').find('.mark-bar').each(function(i, v) {
    var $bar, _i, _results;
    $bar = $(v);
    _results = [];
    for (i = _i = 1; _i <= 10; i = ++_i) {
      _results.push($('<div/>').addClass('mark-bar-item').attr('data-score', i).appendTo($bar));
    }
    return _results;
  });
  dlg.content($('<div/>').append($content).html());
  $(dlg.node).find('.user-search').autocomplete({
    source: 'ajax.ashx?action=searchuser',
    select: function(e, ui) {
      e.preventDefault();
      return $(dlg.node).data('selected', ui.item.value).find('.user-search').val(ui.item.label);
    },
    focus: function(e, ui) {
      e.preventDefault();
      return $(dlg.node).find('.user-search').val(ui.item.label);
    }
  }).end().on('click', '.mark-bar-item', function() {
    var $this, score;
    $this = $(this);
    score = $this.data('score');
    return $this.parent().find('.mark-bar-item').each(function(i, v) {
      var $sub;
      $sub = $(v);
      if ($sub.data('score') <= score) {
        return $sub.addClass('selected');
      } else {
        return $sub.removeClass('selected');
      }
    });
  }).on('mouseleave', '.mark-dialog .mark-bar-item', function() {
    return $doc.find('.mark-dialog').find('.mark-bar-item').removeClass('highlight');
  }).on('mouseenter', '.mark-bar-item', function() {
    var $this, score;
    $this = $(this);
    score = $this.data('score');
    return $this.parent().find('.mark-bar-item').each(function(i, v) {
      var $sub;
      $sub = $(v);
      if ($sub.data('score') <= score) {
        return $sub.addClass('highlight');
      }
    });
  }).on('click', '.mark-dialog .btn-close', function() {
    return dlg.close();
  }).on('click', '.btn-ok', function() {
    var cooperative, efficiency, uid, workload, _ref;
    uid = isSelf ? myUserID : $(dlg.node).data('selected');
    _ref = _.map(['workload', 'efficiency', 'cooperative'], function(item) {
      return _.reduce($(dlg.node).find('.mark-item-' + item).find('.mark-bar-item.selected'), function(memo, li) {
        var score;
        score = $(li).data('score');
        if (score && score > memo) {
          return score;
        } else {
          return memo;
        }
      }, 0);
    }), workload = _ref[0], efficiency = _ref[1], cooperative = _ref[2];
    if (uid && workload && efficiency && cooperative) {
      return data.markUser(uid, {
        workload: workload,
        efficiency: efficiency,
        cooperative: cooperative
      }).then(function(resultList) {
        var result;
        result = _.reduce(resultList, (function(memo, num) {
          if (num > memo) {
            return memo;
          } else {
            return num;
          }
        }), 1);
        if (result > 0) {
          alert('评分成功');
          $doc.find('.my').find('.marked').html('今日已评价 ' + parseInt($doc.find('.my').find('.marked').html()));
        } else {
          alert('错误码: ' + result);
        }
        return dlg.close();
      }).fail(function() {
        return alert('请求失败');
      });
    } else {
      return alert('未选择用户或未打分');
    }
  });
  return dlg.showModal();
}).on('click', '#view-other', function() {
  var dlg;
  dlg = dialog({
    skin: 'dialog',
    content: $('#tpl-select-user-dialog').html(),
    onclose: function() {
      return $(dlg.node).data('selected', null);
    }
  });
  $(dlg.node).find('.user-search').autocomplete({
    source: 'ajax.ashx?action=searchuser',
    select: function(e, ui) {
      e.preventDefault();
      return $(dlg.node).data('selected', ui.item.value).find('.user-search').val(ui.item.label);
    },
    focus: function(e, ui) {
      e.preventDefault();
      return $(dlg.node).find('.user-search').val(ui.item.label);
    }
  }).end().on('click', '.btn-close', function() {
    $(dlg.node).find('.user-search').val('');
    return dlg.close();
  }).on('click', '.btn-ok', function() {
    var uid;
    uid = $(dlg.node).data('selected');
    if (uid) {
      return data.getUser(uid).then(function(user) {
        if (!user) {
          return $.Deferred().reject();
        }
        $doc.trigger('loadUser', user);
        return dlg.close();
      }).fail(function() {
        return alert('请求失败');
      });
    } else {
      return alert('请选择用户');
    }
  });
  return dlg.showModal();
}).on('click', '#view-self', function() {
  return $doc.trigger('init');
});

$(function() {
  return $doc.trigger('init');
});

//# sourceMappingURL=main.map
